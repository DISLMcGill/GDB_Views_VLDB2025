MATCH (p:Person)-[:PERSON_KNOWS_PERSON]-(friend:Person)<-[:COMMENT_HAS_CREATOR_PERSON|POST_HAS_CREATOR_PERSON]-(message:Post:Comment) WHERE p.id = 1129 AND message.creationDate <= 1322000000000 RETURN friend.id AS personId, friend.firstName AS personFirstName, friend.lastName AS personLastName, id(message) AS postOrCommentId, coalesce(message.content,message.imageFile) AS postOrCommentContent, message.creationDate AS postOrCommentCreationDate ORDER BY postOrCommentCreationDate DESC LIMIT 20;
MATCH (person:Person)-[:PERSON_KNOWS_PERSON]-(friend:Person), (friend)<-[:POST_HAS_CREATOR_PERSON]-(post:Post)-[:POST_HAS_TAG_TAG]->(tag) WHERE person.id = 1129 WITH DISTINCT tag, post WITH tag, CASE WHEN post.creationDate >= 1345000000000 AND post.creationDate < 1348000000000 THEN 1 ELSE 0 END AS valid, CASE WHEN post.creationDate < 1345000000000 THEN 1 ELSE 0 END AS inValid WITH tag, sum(valid) AS postCount, sum(inValid) AS inValidPostCount WHERE postCount>0 AND inValidPostCount=0 RETURN tag.name AS tagName, postCount ORDER BY postCount DESC, tagName ASC LIMIT 10;
(BUFFER FRAME ERROR) MATCH (person:Person)-[:PERSON_KNOWS_PERSON*1..2]-(friend:Person) WHERE person.id = 1129 AND NOT person=friend WITH DISTINCT friend MATCH (friend)<-[membership:FORUM_HAS_MEMBER]-(forum) WHERE membership.joinDate > 1322000000000 WITH forum, collect(friend) AS friends OPTIONAL MATCH (friend)<-[:POST_HAS_CREATOR_PERSON]-(post)<-[:FORUM_CONTAINER_OF_POST]-(forum) WHERE friend IN friends WITH forum, count(post) AS postCount RETURN forum.title AS forumName, postCount ORDER BY postCount DESC, forum.id LIMIT 20;
(BUFFER FRAME ERROR) MATCH (knownTag:Tag) WHERE knownTag.name= "Muammar_Gaddafi" WITH knownTag.id as knownTagId  MATCH (person:Person)-[:PERSON_KNOWS_PERSON*1..2]-(friend:Person) WHERE person.id= 993 AND NOT person=friend WITH knownTagId, collect(distinct friend) as friends UNWIND friends as f MATCH (f)<-[:POST_HAS_CREATOR_PERSON]-(post:Post),(post)-[:POST_HAS_TAG_TAG]->(t:Tag), (post)-[:POST_HAS_TAG_TAG]->(tag:Tag)WHERE t.id= knownTagId AND NOT t = tag WITH tag.name as tagName, count(post) as postCount RETURN tagName, postCount ORDER BY postCount DESC,tagName ASC LIMIT 10
MATCH (start:Person)<-[:COMMENT_HAS_CREATOR_PERSON|POST_HAS_CREATOR_PERSON]-(:Post:Comment)<-[:COMMENT_REPLY_OF_COMMENT|COMMENT_REPLY_OF_POST]-(comment:Comment)-[:COMMENT_HAS_CREATOR_PERSON]->(person:Person) WHERE start.id = 933 RETURN person.id AS personId, person.firstName AS personFirstName, person.lastName AS personLastName,comment.creationDate AS commentCreationDate, comment.id AS commentId, comment.content AS commentContent ORDER BY commentCreationDate DESC, commentId ASC LIMIT 20
MATCH (tag:Tag)-[:HAS_TYPE|TAGCLASS_IS_SUBCLASS_OF*0..]->(baseTagClass:TagClass) WHERE tag.name = "OfficeHolder" OR baseTagClass.name = "OfficeHolder" WITH collect(tag.id) as tags MATCH (p:Person)-[:PERSON_KNOWS_PERSON]-(friend:Person)<-[:COMMENT_HAS_CREATOR_PERSON]-(comment:Comment)-[:COMMENT_REPLY_OF_POST]->(:Post)-[:POST_HAS_TAG_TAG]->(tag:Tag) WHERE p.id = 1129 AND tag.id in tags RETURN friend.id AS personId,friend.firstName AS personFirstName,friend.lastName AS personLastName,   collect(DISTINCT tag.name) AS tagNames, count(DISTINCT comment) AS replyCount ORDER BY replyCount DESC, personId LIMIT 20;
MATCH (p:Person)<-[:COMMENT_HAS_CREATOR_PERSON]-(message:Comment) WHERE p.id = 933 WITH message, message.id AS messageId, message.creationDate AS messageCreationDate ORDER BY messageCreationDate DESC, messageId LIMIT 10 MATCH (message)-[:COMMENT_REPLY_OF_POST*0..]->(post:Post)-[:POST_HAS_CREATOR_PERSON]->(person:Person) RETURN messageId, message.content AS messageContent, messageCreationDate, post.id AS postId, person.id AS personId, person.firstName AS personFirstName, person.lastName AS personLastName ORDER BY messageCreationDate DESC, messageId;
MATCH (n:Person)-[r:PERSON_KNOWS_PERSON]-(friend:Person) WHERE n.id = 933 RETURN friend.id AS personId, friend.firstName AS firstName, friend.lastName AS lastName,r.creationDate AS friendshipCreationDate ORDER BY friendshipCreationDate DESC,personId;
MATCH (m:Post:Comment) WHERE m.id = 481036337184 RETURN m.creationDate as messageCreationDate,    coalesce(m.content, m.imageFile) as messageContent
MATCH (m:Post:Comment)-[:COMMENT_HAS_CREATOR_PERSON|POST_HAS_CREATOR_PERSON]->(p:Person) WHERE m.id = 687195136543 RETURN p
MATCH (m:Comment)-[:COMMENT_REPLY_OF_POST*0..]->(p:Post)<-[:FORUM_CONTAINER_OF_POST]-(f:Forum)-[:FORUM_HAS_MODERATOR]->(mod:Person) WHERE m.id = 687195136543 RETURN f.id AS forumId,f.title AS forumTitle,mod.id AS moderatorId, mod.firstName AS moderatorFirstName, mod.lastName AS moderatorLastName;
MATCH (m:Post:Comment)<-[:COMMENT_REPLY_OF_COMMENT|COMMENT_REPLY_OF_POST]-(c:Comment)-[:COMMENT_HAS_CREATOR_PERSON]->(p:Person) WHERE m.id = 824633721294 OPTIONAL MATCH (m)-[:COMMENT_HAS_CREATOR_PERSON|POST_HAS_CREATOR_PERSON]->(a:Person)-[r:PERSON_KNOWS_PERSON]-(p) RETURN c.id AS commentId, c.content AS commentContent, c.creationDate AS commentCreationDate, p.id AS replyAuthorId, p.firstName AS replyAuthorFirstName, p.lastName AS replyAuthorLastName, CASE r WHEN null THEN false ELSE true END AS replyAuthorKnowsOriginalMessageAuthor ORDER BY commentCreationDate DESC, replyAuthorId;
